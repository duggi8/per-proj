package code.heap;

import java.lang.reflect.Array;
//Base class
public abstract class Heap<T extends Comparable<T>> {
	private static int MAX_SIZE = 40;
	private int count = 0;
	private T[] array;
	
	Heap(Class<T> cl){
		this(cl,MAX_SIZE);
	}

	Heap(Class<T> cl,int size){
		array = (T[])Array.newInstance(cl,size);
	}
	
	public int getLeftChildIndex(int index) {
		int leftChildIndex = 2*index+1;
		if(leftChildIndex>= count)
			return -1;
		return leftChildIndex;
	}
	
	public int getRightChildIndex(int index) {
		int rightChildIndex = 2*index+2;
		if(rightChildIndex >= count)
			return -1;
		return rightChildIndex;
				
	}
}
