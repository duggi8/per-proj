package code.heap;

import code.heap.Heap.HeapFullException;

public class Box<T extends Comparable<T>> implements Comparable<Box<T>> {
	
		T size;
		T weight;
		
		public Box(T size, T weight) {
			super();
			this.size = size;
			this.weight = weight;
		}
		public T getSize() {
			return size;
		}
		public void setSize(T size) {
			this.size = size;
		}
		public T getWeight() {
			return weight;
		}
		public void setWeight(T weight) {
			this.weight = weight;
		}
		@Override
		public int compareTo(Box<T> o) {
			//if two box has same size, we check for less weight box as next priority.
			int res = this.getSize().compareTo(o.getSize());
			if(res == 0 ) {
				res = this.getWeight().compareTo(o.getWeight());
			}
			return res;
		}
		
		public static void main(String[] args) {
			Box<Integer> b1 = new Box<>(3,3);
			Box<Integer> b2 = new Box<>(3,3);
			Box<Integer> b3 = new Box<>(2,4);
			Box<Integer> b4 = new Box<>(2,3);
			Box<Integer> b5 = new Box<>(2,5);
			Box<Integer> b6 = new Box<>(3,2);
			Box<Integer> b7 = new Box<>(4,1);
			MinHeap<Box<Integer>> min = new MinHeap<>((Class<Box<Integer>>) b1.getClass());
			try {
				min.insert(b2);
				min.insert(b3);
				min.insert(b4);
				min.insert(b5);
				min.insert(b6);
				min.insert(b7);
			} catch (HeapFullException e) {
				e.printStackTrace();
			}
		}
		
		
		 
	
}
